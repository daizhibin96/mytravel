package com.cn.travel.activity.first;


import java.util.ArrayList;
import java.util.List;

import com.cn.travel.bean.Bean;
import com.cn.travel.title.CustomTitle;
import com.cn.travle.R;

import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.view.View;
import android.view.Window;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.Toast;
public class SearchActivity extends Activity implements SearchView.SearchViewListener{
	
	/** 
     * 搜索结果列表view 
     */  
    private ListView lvResults;  
  
    /** 
     * 搜索view 
     */  
    private SearchView searchView;  
  
  
    /** 
     * 热搜框列表adapter 
     */  
    private ArrayAdapter<String> hintAdapter;  
  
    /** 
     * 自动补全列表adapter 
     */  
    private ArrayAdapter<String> autoCompleteAdapter;  
  
    /** 
     * 搜索结果列表adapter 
     */  
    private SearchAdapter resultAdapter;  
  
    /** 
     * 数据库数据，总数据 
     */  
    private List<Bean> dbData;  
  
    /** 
     * 热搜版数据 
     */  
    private List<String> hintData;  
  
    /** 
     * 搜索过程中自动补全数据 
     */  
    private List<String> autoCompleteData;  
  
    /** 
     * 搜索结果的数据 
     */  
    private List<Bean> resultData;  
  
    /** 
     * 默认提示框显示项的个数 
     */  
    private static int DEFAULT_HINT_SIZE = 4;  
  
    /** 
     * 提示框显示项的个数 
     */  
    private static int hintSize = DEFAULT_HINT_SIZE;  
  
    /** 
     * 设置提示框显示项的个数 
     * 
     *  hintSize 提示框显示个数 
     */  
    public static void setHintSize(int hintSize) {  
       SearchActivity.hintSize = hintSize;  
    }  
  
  
    @Override  
    protected void onCreate(Bundle savedInstanceState) {  
        super.onCreate(savedInstanceState);  
        requestWindowFeature(Window.FEATURE_NO_TITLE);
       
        setContentView(R.layout.activity_search);  
        initData();  //初始化热搜，自动补全，搜索列表数据
        initViews();  
    }  
  
    /** 
     * 初始化视图 
     */  
    private void initViews() {  
        lvResults = (ListView) findViewById(R.id.main_lv_search_results);  
        searchView = (SearchView) findViewById(R.id.main_search_layout);  
        //设置监听  
        searchView.setSearchViewListener(this);  
        //设置adapter  
        searchView.setTipsHintAdapter(hintAdapter);  
        searchView.setAutoCompleteAdapter(autoCompleteAdapter);  
  
        lvResults.setOnItemClickListener(new AdapterView.OnItemClickListener() {  
            @Override  
            public void onItemClick(AdapterView<?> adapterView, View view, int position, long l) {  
                Toast.makeText(SearchActivity.this, position + "", Toast.LENGTH_SHORT).show();  
            }  
        });  
    }  
  
    /** 
     * 初始化数据 
     */  
    private void initData() {  
        //从数据库获取数据  
        getDbData();  
        //初始化热搜版数据  
        getHintData();  
        //初始化自动补全数据  
        getAutoCompleteData(null);  
        //初始化搜索结果数据  
        getResultData(null);  
    }  
  
    /** 
     * 获取db 数据 
     */  
    private void getDbData() {  
        int size = 100;  
        dbData = new ArrayList<Bean>(size);  
        for (int i = 0; i < size; i++) {  
            dbData.add(new Bean(R.drawable.icon, "旅游景点" + (i + 1), "测试搜索景点中", i * 20 + 2 + ""));  
        }  
    }  
  
    /** 
     * 获取热搜版data 和adapter 
     */  
    private void getHintData() {  
        hintData = new ArrayList<String>(hintSize);  
        for (int i = 1; i <= hintSize; i++) {  
            hintData.add("热搜" + i + "：旅游景点");  
        }  
        hintAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, hintData);  
    }  
  
    /** 
     * 获取自动补全data 和adapter 
     */  
    private void getAutoCompleteData(String text) {  
        if (autoCompleteData == null) {  
            //初始化  
            autoCompleteData = new ArrayList<String>(hintSize);  
        } else {  
            // 根据text 获取auto data  
            autoCompleteData.clear();  
            for (int i = 0, count = 0; i < dbData.size()  
                    && count < hintSize; i++) {  
                if (dbData.get(i).getTitle().contains(text.trim())) {  
                    autoCompleteData.add(dbData.get(i).getTitle());  
                    count++;  
                }  
            }  
        }  
        if (autoCompleteAdapter == null) {  
            autoCompleteAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, autoCompleteData);  
        } else {  
            autoCompleteAdapter.notifyDataSetChanged();  
        }  
    }  
  
    /** 
     * 获取搜索结果data和adapter 
     */  
    private void getResultData(String text) {  
        if (resultData == null) {  
            // 初始化  
            resultData = new ArrayList<Bean>();  
        } else {  
            resultData.clear();  
            for (int i = 0; i < dbData.size(); i++) {  
                if (dbData.get(i).getTitle().contains(text.trim())) {  
                    resultData.add(dbData.get(i));  
                }  
            }  
        }  
        if (resultAdapter == null) {  
            resultAdapter = new SearchAdapter(this, resultData, R.layout.list_item_searchresult);  
        } else {  
            resultAdapter.notifyDataSetChanged();  
        }  
    }  
  
    /** 
     * 当搜索框 文本改变时 触发的回调 ,更新自动补全数据 
     * 
     */  
    @Override  
    public void onRefreshAutoComplete(String text) {  
        //更新数据  
        getAutoCompleteData(text);  
    }  
  
    /** 
     * 点击搜索键时edit text触发的回调 
     * 
     * @param text 
     */  
    @Override  
    public void onSearch(String text) {  
        //更新result数据  
        getResultData(text);  
        lvResults.setVisibility(View.VISIBLE);  
        //第一次获取结果 还未配置适配器  
        if (lvResults.getAdapter() == null) {  
            //获取搜索数据 设置适配器  
            lvResults.setAdapter(resultAdapter);  
        } else {  
            //更新搜索数据  
            resultAdapter.notifyDataSetChanged();  
        }  
        Toast.makeText(this, "完成搜素", Toast.LENGTH_SHORT).show();  
    } 

}
